// WARNING
// This file was autogenerated, and _will_ be overwritten by Halyard.
// Any edits you make here _will_ be lost.

'use strict';

var gateHost = 'http://spin-gate-spinnaker.okd';
var bakeryDetailUrl = gateHost + '/bakery/logs/{{context.region}}/{{context.status.resourceId}}';
var authEndpoint = gateHost + '/auth/user';
var authEnabled = 'false' === 'true';
var chaosEnabled = 'false' === 'true';
var fiatEnabled = 'false' === 'true';
var iapRefresherEnabled = '{%features.iapRefresherEnabled}' === 'true';
var jobsEnabled = 'false' === 'true';
var infrastructureStagesEnabled = '{%features.infrastructureStages%}' === 'true';
var pipelineTemplatesEnabled = 'false' === 'true';
var artifactsEnabled = 'true' === 'true';
var travisEnabled = 'false' === 'true';
var werckerEnabled = 'false' === 'true';
var mineCanaryEnabled = 'false' === 'true';
var reduxLoggerEnabled = '{%canary.reduxLogger%}' === 'true';
var defaultMetricsAccountName = '{%canary.defaultMetricsAccount%}';
var defaultStorageAccountName = '{%canary.defaultStorageAccount%}';
var defaultCanaryJudge = '{%canary.defaultJudge%}';
var defaultMetricsStore = '{%canary.defaultMetricsStore%}';
var canaryStagesEnabled = '{%canary.stages%}' === 'true';
var atlasWebComponentsUrl = '';
var templatesEnabled = '{%canary.templatesEnabled%}' === 'true';
var showAllConfigsEnabled = '{%canary.showAllCanaryConfigs%}' === 'true';
var canaryFeatureDisabled = 'false' !== 'true';
var maxPipelineAgeDays = '{%maxPipelineAgeDays%}';
var timezone = 'America/Los_Angeles';
var version = '1.10.5';
var changelogGistId = '1e97e8c6991e750fa12a70325221da45';
var changelogGistName = 'changelog.md';
var appengineContainerImageUrlDeploymentsEnabled = 'false' === 'true';
var gce = {
  defaults: {
    account: '',
    region: 'us-central1',
    zone: 'us-central1-f',
  },
  associatePublicIpAddress: true,
};
var kubernetes = {
  defaults: {
    account: 'my-k8s-v2-account',
    namespace: 'default',
    proxy: 'localhost:8001',
    internalDNSNameTemplate: '{{name}}.{{namespace}}.svc.cluster.local',
    instanceLinkTemplate: '{{host}}/api/v1/proxy/namespaces/{{namespace}}/pods/{{name}}',
  },
};
var appengine = {
  defaults: {
    account: '',
    editLoadBalancerStageEnabled: 'false' === 'true',
    containerImageUrlDeployments: appengineContainerImageUrlDeploymentsEnabled,
  },
};
var openstack = {
  defaults: {
    account: '',
    region: '{%openstack.default.region%}',
  },
};
var azure = {
  defaults: {
    account: '',
    region: 'westus',
  },
};
var oracle = {
  defaults: {
    account: '{%oracle.default.account%}',
    region: '{%oracle.default.region%}',
  },
};
var dcos = {
  defaults: {
    account: '',
  },
};
var aws = {
  defaults: {
    account: '',
    region: '{%aws.default.region%}',
    iamRole: 'BaseIAMRole',
  },
  defaultSecurityGroups: [],
  loadBalancers: {
    // if true, VPC load balancers will be created as internal load balancers if the selected subnet has a purpose
    // tag that starts with "internal"
    inferInternalFlagFromSubnet: false,
  },
  useAmiBlockDeviceMappings: false,
};
var ecs = {
  defaults: {
    account: '',
  },
};
var entityTagsEnabled = false;
var netflixMode = false;
var notificationsEnabled = 'false' === 'true';
var slack = {
  enabled: 'false' === 'true',
  botName: '',
};

window.spinnakerSettings = {
  version: version,
  checkForUpdates: false,
  defaultProviders: [
    'aws',
    'ecs',
    'gce',
    'azure',
    'cloudfoundry',
    'kubernetes',
    'titus',
    'openstack',
    'oracle',
    'dcos',
  ],
  gateUrl: gateHost,
  bakeryDetailUrl: bakeryDetailUrl,
  authEndpoint: authEndpoint,
  pollSchedule: 30000,
  defaultTimeZone: timezone, // see http://momentjs.com/timezone/docs/#/data-utilities/
  defaultCategory: 'serverGroup',
  defaultInstancePort: 80,
  maxPipelineAgeDays: maxPipelineAgeDays,
  providers: {
    azure: azure,
    aws: aws,
    ecs: ecs,
    gce: gce,
    titus: {
      defaults: {
        account: 'titustestvpc',
        region: 'us-east-1',
        iamProfile: '{{application}}InstanceProfile',
      },
    },
    openstack: openstack,
    kubernetes: kubernetes,
    appengine: appengine,
    oracle: oracle,
    dcos: dcos,
  },
  changelog: {
    gistId: changelogGistId,
    fileName: changelogGistName,
  },
  notifications: {
    email: {
      enabled: true,
    },
    hipchat: {
      enabled: true,
      botName: 'Skynet T-800',
    },
    sms: {
      enabled: true,
    },
    slack: slack,
  },
  pagerDuty: {
    required: false,
  },
  authEnabled: authEnabled,
  authTtl: 600000,
  gitSources: ['stash', 'github', 'bitbucket', 'gitlab'],
  pubsubProviders: ['google'], // TODO(joonlim): Add amazon once it is confirmed that amazon pub/sub works.
  triggerTypes: ['git', 'pipeline', 'docker', 'cron', 'jenkins', 'wercker', 'travis', 'pubsub', 'webhook'],
  canary: {
    reduxLogger: reduxLoggerEnabled,
    metricsAccountName: defaultMetricsAccountName,
    storageAccountName: defaultStorageAccountName,
    defaultJudge: defaultCanaryJudge,
    metricStore: defaultMetricsStore,
    stagesEnabled: canaryStagesEnabled,
    atlasWebComponentsUrl: atlasWebComponentsUrl,
    templatesEnabled: templatesEnabled,
    showAllConfigs: showAllConfigsEnabled,
    featureDisabled: canaryFeatureDisabled,
  },
  feature: {
    entityTags: entityTagsEnabled,
    fiatEnabled: fiatEnabled,
    iapRefresherEnabled: iapRefresherEnabled,
    netflixMode: netflixMode,
    chaosMonkey: chaosEnabled,
    jobs: jobsEnabled,
    pipelineTemplates: pipelineTemplatesEnabled,
    notifications: notificationsEnabled,
    artifacts: artifactsEnabled,
    canary: mineCanaryEnabled,
    infrastructureStages: infrastructureStagesEnabled,
    pipelines: true,
    fastProperty: true,
    vpcMigrator: true,
    pagerDuty: false,
    clusterDiff: false,
    roscoMode: true,
    snapshots: false,
    travis: travisEnabled,
    wercker: werckerEnabled,
    versionedProviders: true,
  },
};